// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model userAdmin {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  password   String
  role       Role      @default(ADMIN)
  created_at DateTime  @default(now())
  updated_at DateTime?
}

enum Role {
  ADMIN
  CUSTOMER
}

model User {
  id          String    @id @default(uuid())
  name        String
  email       String
  imageUrl    String?
  startupName String?
  phone       String?
  created_at  DateTime  @default(now())
  updated_at  DateTime?
  Reserve     Reserve[]
}

model Coworking {
  id             String           @id @default(uuid())
  name           String
  type           String
  accents        String?
  created_at     DateTime         @default(now())
  updated_at     DateTime?
  Seat           Seat[]
  Reserve        Reserve[]
  ImageCoworking ImageCoworking[]

  @@map("coworkings")
}

model ImageCoworking {
  id        String    @id @default(uuid())
  imagePath String?
  coworking Coworking @relation(fields: [coworkingId], references: [id])

  coworkingId String

  @@map("image_coworkings")
}

model Seat {
  id          String    @id @default(uuid())
  seatNumber  String
  busy        Boolean?  @default(false)
  coworking   Coworking @relation(fields: [coworkingId], references: [id])
  coworkingId String
  created_at  DateTime  @default(now())
  updated_at  DateTime?
  Reserve     Reserve[]

  @@map("seats")
}

model Reserve {
  id          String    @id @default(uuid())
  startTime   DateTime
  andTime     DateTime
  userId      String
  seatId      String
  coworkingId String
  created_at  DateTime  @default(now())
  updated_at  DateTime?
  seat        Seat      @relation(fields: [seatId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  coworking   Coworking @relation(fields: [coworkingId], references: [id])

  @@map("reservations")
}
